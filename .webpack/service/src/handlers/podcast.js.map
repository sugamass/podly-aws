{"version":3,"file":"src/handlers/podcast.js","mappings":"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","sources":["webpack://podly-lambda/./src/utils/response.ts","webpack://podly-lambda/webpack/bootstrap","webpack://podly-lambda/./src/handlers/podcast.ts"],"sourcesContent":["import { ApiResponse } from \"../types/api\";\n\nexport const createResponse = <T>(\n  statusCode: number,\n  data: T,\n  headers?: Record<string, string>\n): ApiResponse<T> => {\n  return {\n    statusCode,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...headers,\n    },\n    body: JSON.stringify(data),\n  };\n};\n\nexport const successResponse = <T>(data: T): ApiResponse<T> => {\n  return createResponse(200, data);\n};\n\nexport const errorResponse = (\n  message: string,\n  statusCode = 500\n): ApiResponse => {\n  return createResponse(statusCode, {\n    error: \"Error\",\n    message,\n  });\n};\n\nexport const notFoundResponse = (message = \"Not Found\"): ApiResponse => {\n  return createResponse(404, {\n    error: \"Not Found\",\n    message,\n  });\n};\n\nexport const badRequestResponse = (message: string): ApiResponse => {\n  return createResponse(400, {\n    error: \"Bad Request\",\n    message,\n  });\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {\n  APIGatewayProxyEvent,\n  APIGatewayProxyResult,\n  Context,\n} from \"aws-lambda\";\nimport {\n  successResponse,\n  errorResponse,\n  notFoundResponse,\n  badRequestResponse,\n} from \"../utils/response\";\nimport { PodcastRequest, Podcast } from \"../types/api\";\n\n// インメモリストレージ（本番環境ではDynamoDBなどを使用）\nconst podcasts: Podcast[] = [];\n\nexport const createPodcast = async (\n  event: APIGatewayProxyEvent,\n  context: Context\n): Promise<APIGatewayProxyResult> => {\n  try {\n    if (!event.body) {\n      return badRequestResponse(\"Request body is required\");\n    }\n\n    const request: PodcastRequest = JSON.parse(event.body);\n\n    if (!request.title || !request.description || !request.category) {\n      return badRequestResponse(\n        \"title, description, and category are required\"\n      );\n    }\n\n    const newPodcast: Podcast = {\n      id: Math.random().toString(36).substr(2, 9),\n      title: request.title,\n      description: request.description,\n      category: request.category,\n      duration: request.duration,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    podcasts.push(newPodcast);\n\n    return successResponse(newPodcast);\n  } catch (error) {\n    console.error(\"Error creating podcast:\", error);\n    return errorResponse(\"Failed to create podcast\");\n  }\n};\n\nexport const getPodcast = async (\n  event: APIGatewayProxyEvent,\n  context: Context\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const podcastId = event.pathParameters?.id;\n\n    if (!podcastId) {\n      return badRequestResponse(\"Podcast ID is required\");\n    }\n\n    const podcast = podcasts.find((p) => p.id === podcastId);\n\n    if (!podcast) {\n      return notFoundResponse(\"Podcast not found\");\n    }\n\n    return successResponse(podcast);\n  } catch (error) {\n    console.error(\"Error getting podcast:\", error);\n    return errorResponse(\"Failed to get podcast\");\n  }\n};\n\nexport const listPodcasts = async (\n  event: APIGatewayProxyEvent,\n  context: Context\n): Promise<APIGatewayProxyResult> => {\n  try {\n    const { category } = event.queryStringParameters || {};\n\n    let filteredPodcasts = [...podcasts];\n\n    if (category) {\n      filteredPodcasts = podcasts.filter((p) => p.category === category);\n    }\n\n    return successResponse({\n      podcasts: filteredPodcasts,\n      count: filteredPodcasts.length,\n    });\n  } catch (error) {\n    console.error(\"Error listing podcasts:\", error);\n    return errorResponse(\"Failed to list podcasts\");\n  }\n};\n"],"names":[],"sourceRoot":""}